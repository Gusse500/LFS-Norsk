<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-system-pkgmgt">
  <?dbhtml filename="pkgmgt.html"?>

  <title>Pakkehåndtering</title>

  <para>Pakkebehandling er et ofte etterspurt tillegg til LFS boken. En
  pakkebehandler lar deg spore installasjonen av filer som gjør det enkelt å
  fjerne og oppgradere pakker. I tillegg til binær- og biblioteksfilene, en
  pakkebehandler vil håndtere installasjonen av konfigurasjonsfiler. Før
  du begynner å lure på, NEI&mdash;denne delen vil ikke snakke om eller anbefale
  noen spesiell pakkebehandler. Det den gir er en oppsummering av de fleste
  populære teknikker og hvordan de fungerer. Den perfekte pakkebehandleren for deg vil kanskje
  være blant disse teknikkene eller kan være en kombinasjon av to eller flere av disse
  teknikker. Denne delen nevner kort problemer som kan oppstå ved oppgradering av
  pakker.</para>

  <para>Noen grunner til at ingen pakkebehandler er nevnt i LFS eller BLFS
  inkludere:</para>

  <itemizedlist>
    <listitem>
      <para>Å håndtere pakkehåndtering fjerner fokus fra målene
      til disse bøkene&mdash;som lærer hvordan et Linux system er bygget.</para>
    </listitem>

    <listitem>
      <para>Det er flere løsninger for pakkehåndtering, som hver har
      dens styrker og ulemper. Inkludere en som tilfredsstiller alle målgrupper
      er vanskelig.</para>
    </listitem>
  </itemizedlist>

  <para>Det er skrevet noen tips om emnet pakkehåndtering. Besøk
  the <ulink url="&hints-root;">Hints Project</ulink> og se om en av dem
  passer ditt behov.</para>

  <sect2 id='pkgmgmt-upgrade-issues'>
    <title>Oppgraderingsproblemer</title>

    <para>En Pakkehåndterer gjør det enkelt å oppgradere til nyere versjoner når de
    er utgitt. Generelt kan instruksjonene i LFS- og BLFS-bøkene
    brukes til å oppgradere til nyere versjoner. Her er noen punkter du bør
    være oppmerksom på når du oppgraderer pakker, spesielt på et kjørende system.</para>

    <itemizedlist>
      <listitem>
        <para>Hvis Linux kjernen må oppgraderes (for eksempel fra
        5.10.17 til 5.10.18 eller 5.11.1), må ikke noe annet bygges om.
        Systemet vil fortsette å fungere bra takket være den veldefinerte grensen
        mellom kjernen og brukerområdet. Nærmere bestemt Linux API-deklarasjoner
        trenger ikke å (og bør ikke bli, se neste element) oppgraderes
        ved siden av kjernen. Du må starte systemet på nytt for å bruke
        den oppgraderte kjernen.</para>
      </listitem>

      <listitem>
        <para>Hvis Linux API-deklarasjoner eller Glibc må oppgraderes til en nyere
        versjon, (f.eks. fra glibc-2.31 til glibc-2.32), er det tryggere å
        gjenoppbygge LFS. Selv om du <emphasis>kanskje</emphasis> kan gjenoppbygge
        alle pakkene i deres avhengighetsrekkefølge, anbefaler vi ikke
        det.  </para>
      </listitem>

      <listitem> <para>Hvis en pakke som inneholder et delt bibliotek oppdateres, og
      hvis navnet på biblioteket endres, vil eventuelle pakker dynamisk
      koblet til biblioteket måtte kompileres på nytt for å kunne kobles mot
      det nyere biblioteket. (Merk at det ikke er noen sammenheng mellom
      pakkeversjon og navnet på biblioteket.) Tenk for eksempel på en pakke
      foo-1.2.3 som installerer et delt bibliotek med navn <filename
      class='libraryfile'>libfoo.so.1</filename>. Hvis du oppgraderer pakken til
      en nyere versjon foo-1.2.4 som installerer et delt bibliotek med navn
      <filename class='libraryfile'>libfoo.so.2</filename>. I dette tilfellet, alle
      pakker som er dynamisk koblet til <filename
      class='libraryfile'>libfoo.so.1</filename> må kompileres på nytt for å lenke
      imot <filename class='libraryfile'>libfoo.so.2</filename> for å
      bruke den nye bibliotekversjonen. Du bør ikke fjerne det forrige
      biblioteker med mindre alle de avhengige pakkene er rekompilert.</para>
      </listitem>

      <listitem> <para>Hvis en pakke som inneholder et delt bibliotek oppdateres,
      og navnet på biblioteket ikke endres, men versjonsnummeret til
      bibliotek <emphasis role="bold">filen</emphasis> reduseres (f.eks.
      navnet på biblioteket beholdes ved navn
      <filename class='libraryfile'>libfoo.so.1</filename>,
      men navnet på bibliotekfilen er endret fra
      <filename class='libraryfile'>libfoo.so.1.25</filename> til
      <filename class='libraryfile'>libfoo.so.1.24</filename>),
      bør du fjerne bibliotekfilen fra den tidligere installerte versjonen
      (<filename class='libraryfile'>libfoo.so.1.25</filename> i dette tilfellet).
      Eller, et <command>ldconfig</command> kjører (av deg selv ved å bruke en kommando
      linje, eller ved installasjon av en pakke) vil tilbakestille symbolkoblingen
      <filename class='libraryfile'>libfoo.so.1</filename> til å peke på
      den gamle bibliotekfilen fordi den ser ut til å ha en <quote>nyere</quote>
      versjon, ettersom versjonsnummeret er større. Denne situasjonen kan skje hvis
      du må nedgradere en pakke, ellers endrer pakken versjonen
      ordningen med bibliotekfiler plutselig.</para> </listitem>

      <listitem><para>Hvis en pakke som inneholder et delt bibliotek oppdateres,
      og navnet på biblioteket ikke endres, men et alvorlig problem
      (spesielt en sikkerhetssårbarhet) er fikset, alle programmer som kjører
      koblet til det delte biblioteket bør startes på nytt. Følgende
      kommando, kjørt som <systemitem class="username">root</systemitem> etter
      oppdateringen, vil liste opp hva som bruker de gamle versjonene av disse bibliotekene
      (erstatt <replaceable>libfoo</replaceable> med navnet på
      biblioteket):</para>

<screen role="nodump"><userinput>grep -l  -e '<replaceable>libfoo</replaceable>.*deleted' /proc/*/maps |
   tr -cd 0-9\\n | xargs -r ps u</userinput></screen>

      <para>
        Hvis <application>OpenSSH</application> brukes for tilgang til
        systemet og det er koblet til det oppdaterte biblioteket, må du
        omstarte <command>sshd</command> tjenesten, deretter logg ut, logg på igjen,
        og kjør kommandoen på nytt for å bekrefte at ingenting fortsatt bruker
        de slettede bibliotekene.
      </para>

      <para revision='systemd'>
        Hvis <command>systemd</command> nissen (kjører som PID 1) er
        koblet til det oppdaterte biblioteket, kan du starte det på nytt uten å omstarte
        ved å kjøre <command>systemctl daemon-reexec</command> som
        <systemitem class='username'>root</systemitem> brukeren.
      </para></listitem>

      <listitem>
        <para>Hvis et binært eller et delt bibliotek overskrives, kan prosessene
        som bruker koden eller dataene i binærfilen eller biblioteket krasje. Den
        riktige måten å oppdatere et binært eller et delt bibliotek uten å forårsake
        at prosessen krasjer er å fjerne den først, og deretter installere den nye
        versjonen. <command>install</command> kommandoen
        levert av <application>Coreutils</application> har allerede
        implementert dette og de fleste pakker bruker det til å installere binærfiler og
        biblioteker. Dette betyr at du ikke vil bli plaget av dette problemet mesteparten av tiden.
        Imidlertid er installasjonsprosessen for noen pakker (spesielt Mozilla JS
        i BLFS) bare å overskrive filen hvis den eksisterer og forårsaker et krasj, så
        det er tryggere å lagre arbeidet ditt og lukke unødvendige kjørende prosesser
        før du oppdaterer en pakke.</para>
      </listitem>
    </itemizedlist>

  </sect2>

  <sect2>
    <title>Pakkehåndteringsteknikker</title>

    <para>Følgende er noen vanlige pakkehåndteringsteknikker. Før du
    ta en avgjørelse om en pakkeforvalter, gjør litt research på de forskjellige
    teknikker, spesielt ulempene ved den spesielle ordningen.</para>

    <sect3>
      <title>Alt er i hodet mitt!</title>

      <para>Ja, dette er en pakkehåndteringsteknikk. Noen mennesker finner ikke
      behovet for en pakkehåndterer fordi de kjenner pakkene inngående
      og vet hvilke filer som er installert av hver pakke. Noen brukere trenger heller ikke
      pakkehåndtering fordi de planlegger å gjenoppbygge hele
      system når en pakke endres.</para>

    </sect3>

    <sect3>
      <title>Installer i separate kataloger</title>

      <para>Dette er en forenklet pakkehåndtering som ikke trenger noe ekstra
      pakke for å administrere installasjonene. Hver pakke er installert i en
      egen katalog. For eksempel er pakke foo-1.1 installert i
      <filename class='directory'>/usr/pkg/foo-1.1</filename>
      og en symbolkobling er laget fra <filename>/usr/pkg/foo</filename> til
      <filename class='directory'>/usr/pkg/foo-1.1</filename>. Ved installasjon
      av en ny versjon foo-1.2, installeres den i
      <filename class='directory'>/usr/pkg/foo-1.2</filename> og den forrige
      symbolkoblingen erstattes av en symbolkobling til den nye versjonen.</para>

      <para>Miljøvariabler som f.eks <envar>PATH</envar>,
      <envar>LD_LIBRARY_PATH</envar>, <envar>MANPATH</envar>,
      <envar>INFOPATH</envar> og <envar>CPPFLAGS</envar> må utvides til
      å inkludere <filename>/usr/pkg/foo</filename>. For mer enn noen få pakker,
      blir denne ordningen uhåndterlig.</para>

    </sect3>

    <sect3>
      <title>Symlink Style Package Management</title>

      <para>Dette er en variant av den tidligere pakkehåndteringsteknikken.
      Hver pakke er installert på samme måte som den forrige ordningen. Men i stedet for
      å gjøre symbolkoblingen, er hver fil symlinked inn i
      <filename class='directory'>/usr</filename> hierarkiet. Dette fjerner
      behovet for å utvide miljøvariablene. Selv om symbolkoblingene kan være
      opprettet av brukeren for å automatisere opprettelsen, har mange pakkeforvaltere
      blitt skrevet ved hjelp av denne tilnærmingen. Noen av de populære inkluderer Stow,
      Epkg, Graft og Depot.</para>

      <para>Installasjonen må forfalskes, slik at pakken tror det
      den er installert i <filename class="directory">/usr</filename> skjønt i
      virkeligheten er den installert i
      <filename class="directory">/usr/pkg</filename> hierarkiet. Installering på
      denne måten er vanligvis ikke en triviell oppgave. Tenk for eksempel på at du
      installerer en pakke libfoo-1.1. Følgende instruksjoner kan
      ikke installere pakken riktig:</para>

<screen role="nodump"><userinput>./configure --prefix=/usr/pkg/libfoo/1.1
make
make install</userinput></screen>

      <para>Installasjonen vil fungere, men de avhengige pakkene kan ikke kobles
      til libfoo som du forventer. Hvis du kompilerer en pakke som lenker mot
      libfoo, kan du legge merke til at den er koblet til
      <filename class='libraryfile'>/usr/pkg/libfoo/1.1/lib/libfoo.so.1</filename>
      i stedet for <filename class='libraryfile'>/usr/lib/libfoo.so.1</filename>
      som du forventer. Den riktige tilnærmingen er å bruke
      <envar>DESTDIR</envar> strategi for forfalske installasjon av pakken. Dette
      tilnærmingen fungerer som følger:</para>

<screen role="nodump"><userinput>./configure --prefix=/usr
make
make DESTDIR=/usr/pkg/libfoo/1.1 install</userinput></screen>

      <para>De fleste pakker støtter denne tilnærmingen, men det er noen som ikke gjør det.
      For de ikke-kompatible pakkene kan det hende du må installere pakken manuelt
      , eller du kan finne ut at det er lettere å installere noen problematiske
      pakker inn i <filename class='directory'>/opt</filename>.</para>

    </sect3>

    <sect3>
      <title>Tidsstempelbasert</title>

      <para>I denne teknikken blir en fil tidsstemplet før installasjonen av
      pakken. Etter installasjonen, en enkel bruk av
      <command>find</command> kommandoen med de riktige alternativene kan generere
      en logg over alle filene som er installert etter at tidsstempelfilen ble opprettet. En
      pakkebehandler skrevet med denne tilnærmingen er install-log.</para>

      <para>Selv om denne ordningen har fordelen av å være enkel, har den to
      ulemper. Hvis filene under installasjonen er installert med et
      annet tidsstempel enn gjeldende tid, vil disse filene ikke spores av
      pakkebehandleren. Dessuten kan denne ordningen bare brukes når én pakke
      installeres om gangen. Loggene er ikke pålitelige hvis to pakker
      installeres på to forskjellige konsoller.</para>

    </sect3>

    <sect3>
      <title>Sporing av installasjonsskript</title>

      <para>I denne tilnærmingen, blir kommandoene som installasjonsskriptene utfører
      registrert. Det er to teknikker man kan bruke:</para>

      <para><envar>LD_PRELOAD</envar> miljøvariabelen kan settes til
      å peke på et bibliotek som skal forhåndslastes før installasjonen. Under
      installasjonen, sporer dette biblioteket pakkene som blir installert og
      fester seg til ulike kjørbare filer som f.eks <command>cp</command>,
      <command>install</command>, <command>mv</command> og sporing av systemets
      anrop som endrer filsystemet. For å få denne tilnærmingen til å virke, alle
      kjørbare filer må være dynamisk koblet uten suid- eller sgid-biten.
      Forhåndsinnlasting av biblioteket kan forårsake noen uønskede bivirkninger under
      installasjon. Derfor anbefales det at man utfører noen tester for å
      sørge for at pakkebehandlingen ikke bryter noe og logger alle
      passende filer.</para>

      <para>Den andre teknikken er å bruke <command>strace</command>, som
      logger alle systemanrop som gjøres under utførelse av
      installasjonensskriptet.</para>
    </sect3>

    <sect3>
      <title>Opprette pakkearkiver</title>

      <para>I denne ordningen er pakkeinstallasjonen forfalsket til et separat
      tre som beskrevet i Symlink pakkebehandlingenen. Etter
      installasjon, opprettes et pakkearkiv ved hjelp av de installerte filene.
      Dette arkivet brukes deretter til å installere pakken enten på den lokale
      maskin eller kan til og med brukes til å installere pakken på andre maskiner.</para>

      <para>Denne tilnærmingen brukes av de fleste pakkebehandlere som finnes i
      kommersielle distribusjoner. Eksempler på pakkeforvaltere som følger dette
      tilnærmingen er RPM (som for øvrig kreves av <ulink
      url="http://refspecs.linuxfoundation.org/lsb.shtml">Linux
      Standard Base Specification</ulink>),pkg-utils, Debian's apt, og
      Gentoo's Portage system.  Et hint som beskriver hvordan du adopterer denne stilen av
      pakkehåndtering for LFS systemer ligger på <ulink
      url="&hints-root;fakeroot.txt"/>.</para>

      <para>Oppretting av pakkefiler som inkluderer avhengighetsinformasjon er
      kompleks og er utenfor omfanget av LFS.</para>

      <para>Slackware bruker et <command>tar</command>  basert system for pakke
      arkiv. Dette systemet håndterer med vilje ikke pakkeavhengigheter
      som mer komplekse pakkeforvaltere gjør. For detaljer om Slackware
      pakkebehandling, se <ulink
      url="http://www.slackbook.org/html/package-management.html"/>.</para>
    </sect3>

    <sect3>
      <title>Brukerbasert administrasjon</title>

      <para>Denne ordningen, unik for LFS, ble utviklet av Matthias Benkmann, og er
      tilgjengelig fra <ulink url="&hints-root;">Hints Project</ulink>. I
      denne ordningen, er hver pakke installert som en separat bruker i
      standardplasseringer. Filer som tilhører en pakke identifiseres enkelt med å
      sjekke bruker-ID. Funksjonene og manglene ved denne tilnærmingen er
      for komplisert til å beskrive i denne delen. For detaljer, se
      hintene på <ulink url="&hints-root;more_control_and_pkg_man.txt"/>.</para>

    </sect3>

  </sect2>

  <sect2>
    <title>Distribuere LFS på flere systemer</title>

    <para>En av fordelene med et LFS system er at det ikke er noen filer som
    avhenger av plasseringen til filene på et disksystem. Kloning av et LFS bygg til
    en annen datamaskin med samme arkitektur som basissystemet er like
    enkelt som å bruke <command>tar</command> på LFS partisjonen som inneholder
    rotkatalogen (ca. 250 MB ukomprimert for en standard LFS bygg), kopiere
    den filen via nettverksoverføring eller CD-ROM til det nye systemet og utvide
    den. Fra det tidspunktet må noen få konfigurasjonsfiler endres.
    Konfigurasjonsfiler som kanskje må oppdateres inkluderer:
    <filename>/etc/hosts</filename>,
    <filename>/etc/fstab</filename>,
    <filename>/etc/passwd</filename>,
    <filename>/etc/group</filename>,
    <phrase revision="systemd">
      <filename>/etc/shadow</filename>, og
      <filename>/etc/ld.so.conf</filename>.
    </phrase>
    <phrase revision="sysv">
      <filename>/etc/shadow</filename>,
      <filename>/etc/ld.so.conf</filename>,
      <filename>/etc/sysconfig/rc.site</filename>,
      <filename>/etc/sysconfig/network</filename>, og
      <filename>/etc/sysconfig/ifconfig.eth0</filename>.
    </phrase>
    </para>

    <para>En tilpasset kjerne må kanskje bygges for det nye systemet avhengig av
    forskjeller i systemmaskinvare og den originale kjerne
    konfigurasjonen.</para>

    <note><para>Det har vært noen rapporter om problemer ved kopiering mellom
    lignende, men ikke identiske arkitekturer. For eksempel instruksjonssettet
    for et Intel-system er ikke identisk med en AMD-prosessor og nyere
    versjoner av enkelte prosessorer kan ha instruksjoner som ikke er tilgjengelige i
    tidligere versjoner.</para></note>

    <para>Til slutt må det nye systemet gjøres oppstartbart via <xref
    linkend="ch-bootable-grub"/>.</para>

  </sect2>

</sect1>
