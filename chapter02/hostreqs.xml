<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-partitioning-hostreqs" xreflabel="Systemkrav for verten">
  <?dbhtml filename="hostreqs.html"?>

  <title>Systemkrav for verten</title>

  <sect2>
     <title>Maskinvare</title>

     <para>LFS redaktørene anbefaler at CPUen har minst
     fire kjerner og at systemet har minst 8 GB minne.
     Eldre systemer som ikke oppfyller disse kravene vil fortsatt fungere,
     men tiden for å bygge pakker vil bli betydelig lengre
     enn dokumentert.
  </para>

  </sect2>

  <sect2>
     <title>Programvare</title>

    <para>Vertssystemet ditt bør ha følgende programvare med
    minimumsversjoner angitt. Dette burde ikke være et problem for de fleste
    moderne Linuxdistribusjoner. Vær også oppmerksom på at mange distribusjoner vil
    plassere programvaredeklarasjoner i separate pakker, ofte i form av
    <quote>&lt;pakke-navn&gt;-devel</quote> eller
    <quote>&lt;pakke-navn&gt;-dev</quote>. Pass på å installere disse hvis
    distribusjonen din har dem.</para>

   <para>Tidligere versjoner av de oppførte programvarepakkene kan fungere, men har
   ikke blitt testet.</para>

  <itemizedlist spacing="compact">

    <listitem>
      <para><emphasis role="strong">Bash-3.2</emphasis> (/bin/sh
      bør være en symbolsk eller hard lenke til bash)</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Binutils-2.13.1</emphasis> (Versjoner
      større enn &binutils-version; anbefales ikke ettersom de
      ikke har blitt testet)</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Bison-2.7</emphasis> (/usr/bin/yacc
      bør være en lenke til bison eller et lite skript som kjører bison)</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Coreutils-7.0</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Diffutils-2.8.1</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Findutils-4.2.31</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Gawk-4.0.1</emphasis> (/usr/bin/awk
      bør være en link til gawk)</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">GCC-5.1</emphasis> inkludert C++
      kompilatoren, <command>g++</command> (Versjoner større enn &gcc-version; er ikke
      anbefalt da de ikke er testet). C og C++ standard
      biblioteker (med deklarasjoner) må også være tilstede slik at C++ kompilatoren kan
      bygge vertsbaserte programmer</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Grep-2.5.1a</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Gzip-1.3.12</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Linux Kernel-&min-kernel;</emphasis></para>

      <para>Grunnen til kravet om kjerneversjon er at vi spesifiserer
      den versjonen når du bygger <application>glibc</application> i
      <xref linkend="chapter-cross-tools"/> og
      <xref linkend="chapter-building-system"/>,
      etter anbefaling fra utviklerne.</para>

      <para>Hvis vertskjernen er tidligere enn &min-kernel; du må erstatte
      kjernen med en mer oppdatert versjon. Det er to måter
      du kan gjøre dette på. Først, se om din Linux leverandør tilbyr en &min-kernel;
      eller senere kjernepakke. I så fall kan det være lurt å installere den. Hvis din
      leverandøren ikke tilbyr en akseptabel kjernepakke, eller du foretrekker å la være å
      installer den, kan du kompilere en kjerne selv. Instruksjoner for å
      kompilere kjernen og konfigurere oppstartslasteren (forutsatt at verten
      bruker GRUB) er lokalisert i <xref linkend="chapter-bootable"/>.</para>
	  
	  <para>Vi krever at vertskjernen støtter UNIX 98 pseudoterminal
      (PTY). Det bør være aktivert på all distribusjoner, skrivebord eller server med
      Linux &min-kernel; eller en nyere kjerne. Hvis du bygger en egendefinert
      vertskjerne, sørg for at <option>CONFIG_UNIX98_PTYS</option> er satt til
      <literal>y</literal> i kjernekonfigurasjonen.</para>

    </listitem>

    <listitem>
      <para><emphasis role="strong">M4-1.4.10</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Make-4.0</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Patch-2.5.4</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Perl-5.8.8</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Python-3.4</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Sed-4.1.5</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Tar-1.22</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Texinfo-4.7</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Xz-5.0.0</emphasis></para>
    </listitem>

  </itemizedlist>

  <important>
    <para>Merk at symbollenkene nevnt ovenfor er nødvendige for å bygge et LFS
    system ved å bruke instruksjonene i denne boken. Symlinker som
    peker på annen programvare (som dash, mawk osv.) kan fungere, men er ikke
    testet eller støttet av LFS utviklingsteamet, og kan kreve enten
    avvik fra instruksjonene eller tilleggsoppdateringer til noen
    pakker.</para>
  </important>

  <!-- Use an empty sect2 element to prevent a pdf warning.  -->
  <bridgehead renderas="sect2"
              id="version-check"
              xreflabel="Systemkrav for verten">
  </bridgehead>
  <!--<title> </title>-->

  <para >For å se om vertssystemet ditt har alle de riktige versjonene, og
  muligheten til å kompilere programmer, kjør følgende:</para>

<screen role="nodump"><userinput>cat &gt; version-check.sh &lt;&lt; "EOF"
<literal>#!/bin/bash
# A script to list version numbers of critical development tools

# If you have tools installed in other directories, adjust PATH here AND
# in ~lfs/.bashrc (section 4.4) as well.

LC_ALL=C 
PATH=/usr/bin:/bin

bail() { echo "FATAL: $1"; exit 1; }
grep --version > /dev/null 2> /dev/null || bail "grep does not work"
sed '' /dev/null || bail "sed does not work"
sort   /dev/null || bail "sort does not work"

ver_check()
{
   if ! type -p $2 &amp;>/dev/null
   then 
     echo "ERROR: Cannot find $2 ($1)"; return 1; 
   fi
   v=$($2 --version 2>&amp;1 | grep -E -o '[0-9]+\.[0-9\.]+[a-z]*' | head -n1)
   if printf '%s\n' $3 $v | sort --version-sort --check &amp;>/dev/null
   then 
     printf "OK:    %-9s %-6s >= $3\n" "$1" "$v"; return 0;
   else 
     printf "ERROR: %-9s is TOO OLD ($3 or later required)\n" "$1"; 
     return 1; 
   fi
}

ver_kernel()
{
   kver=$(uname -r | grep -E -o '[0-9\.]+') 
   if printf '%s\n' $1 $kver | sort --version-sort --check &amp;>/dev/null
   then 
     printf "OK:    Linux Kernel $kver >= $1\n"; return 0;
   else 
     printf "ERROR: Linux Kernel ($kver) is TOO OLD ($1 or later required)\n" "$kver"; 
     return 1; 
   fi
}

# Coreutils first because-sort needs Coreutils >= 7.0
ver_check Coreutils      sort     7.0 || bail "--version-sort unsupported"
ver_check Bash           bash     3.2
ver_check Binutils       ld       2.13.1
ver_check Bison          bison    2.7
ver_check Diffutils      diff     2.8.1
ver_check Findutils      find     4.2.31
ver_check Gawk           gawk     4.0.1
ver_check GCC            gcc      5.1
ver_check "GCC (C++)"    g++      5.1
ver_check Grep           grep     2.5.1a
ver_check Gzip           gzip     1.3.12
ver_check M4             m4       1.4.10
ver_check Make           make     4.0
ver_check Patch          patch    2.5.4
ver_check Perl           perl     5.8.8
ver_check Python         python3  3.4
ver_check Sed            sed      4.1.5
ver_check Tar            tar      1.22
ver_check Texinfo        texi2any 4.7
ver_check Xz             xz       5.0.0
ver_kernel &min-kernel;

if mount | grep -q 'devpts on /dev/pts' &amp;&amp; [ -e /dev/ptmx ]
then echo "OK:    Linux Kernel supports UNIX 98 PTY";
else echo "ERROR: Linux Kernel does NOT support UNIX 98 PTY"; fi

alias_check() {
   if $1 --version 2>&amp;1 | grep -qi $2
   then printf "OK:    %-4s is $2\n" "$1";
   else printf "ERROR: %-4s is NOT $2\n" "$1"; fi
}
echo "Aliases:"
alias_check awk GNU
alias_check yacc Bison
alias_check sh Bash

echo "Compiler check:"
if printf "int main(){}" | g++ -x c++ -
then echo "OK:    g++ works";
else echo "ERROR: g++ does NOT work"; fi
rm -f a.out</literal>
EOF

bash version-check.sh</userinput></screen>

 </sect2>
</sect1>
