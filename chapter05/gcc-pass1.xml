<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-tools-gcc-pass1" role="wrap" xreflabel="gcc-pass1">
  <?dbhtml filename="gcc-pass1.html"?>

  <sect1info condition="script">
    <productname>gcc-pass1</productname>
    <productnumber>&gcc-version;</productnumber>
    <address>&gcc-url;</address>
  </sect1info>

  <title>GCC-&gcc-version; - Pass 1</title>

  <indexterm zone="ch-tools-gcc-pass1">
    <primary sortas="a-GCC">GCC</primary>
    <secondary>tools, pass 1</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="../chapter08/gcc.xml"
    xpointer="xpointer(/sect1/sect2[1]/para[1])"/>

    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&gcc-tmpp1-sbu;</seg>
        <seg>&gcc-tmpp1-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>Installasjon av Kryss GCC</title>

    <note><para>GCC-15: Faktisk (slutten av april 2025) er multilib grenen 
      forskjellig fra main (hovedgrenen for LFS utvikling) ettersom multilib 
      grenen inkluderer gcc-15. Siden gcc bruker en ny C-standard (C23) som standard, 
	  kan det være noen pakker som ikke kompilerer med denne 
	  versjonen av gcc.</para>
      <para>Det er noen justeringer i noen pakker, og noen pakker 
	  er kandidater for tidlig utgivelse (-rc1). Upstream (LFS main) vil 
	  vente med å oppgradere til gcc-15 til disse pakkene offisielt 
	  er utgitt. Det kan vare i noen dager.</para>
      <para>Merk at BLFS vil inneholde pakker som kanskje ikke bygger med gcc-15 
	  for øyeblikket. Vi oppgraderte multilib grenen til gcc-15 for folk 
	  som er interessert i å oppdage disse problemene..</para>
    </note>

    <para>GCC krever pakkene GMP, MPFR og MPC. Siden disse pakkene kanskje 
	ikke er inkludert i vertsdistribusjonen din, vil de bli bygget med 
	GCC. Pakk ut hver pakke i GCC kildemappen og gi nytt navn til 
	de resulterende mappene slik at GCC byggeprosedyrene automatisk 
	bruker dem.:</para>

    <note><para>Det er ofte misforståelser om dette kapittelet. 
	Fremgangsmåtene er de samme som i alle andre kapitler, som forklart tidligere. (<xref
    linkend='buildinstr'/>).  Først, pakk ut gcc-&gcc-version; tarball fra 
	kildemappen og deretter endre til mappen som ble opprettet. Først da bør du 
	fortsette med instruksjonene nedenfor.</para></note>

<screen><userinput remap="pre">tar -xf ../mpfr-&mpfr-version;.tar.xz
mv -v mpfr-&mpfr-version; mpfr
tar -xf ../gmp-&gmp-version;.tar.xz
mv -v gmp-&gmp-version; gmp
tar -xf ../mpc-&mpc-version;.tar.gz
mv -v mpc-&mpc-version; mpc</userinput></screen>

    <para arch="default">På x86_64-verter, sett standard mappenavn for
    64-bits biblioteker til <quote>lib</quote>:</para>

<screen arch="default"><userinput remap="pre">case $(uname -m) in
  x86_64)
    sed -e '/m64=/s/lib64/lib/' \
        -i.orig gcc/config/i386/t-linux64
 ;;
esac</userinput></screen>

    <para arch="ml_32,ml_x32,ml_all">Endre standard mappenavn for 
	biblioteker:</para>

<screen arch="ml_32,ml_x32,ml_all"><userinput remap="pre">sed -e '/m64=/s/lib64/lib/' \
    -e '/m32=/s/m32=.*/m32=..\/lib32$(call if_multiarch,:i386-linux-gnu)/' \
    -i.orig gcc/config/i386/t-linux64
</userinput></screen>

    <para arch="ml_32,ml_all">Gjør <literal>-mstackrealign</literal>
      som standard for 32bit objekter:</para>

<screen arch="ml_32,ml_all"><userinput remap="pre">sed '/STACK_REALIGN_DEFAULT/s/0/(!TARGET_64BIT \&amp;\&amp; TARGET_SSE)/' \
      -i gcc/config/i386/i386.h</userinput></screen>

    <note arch="ml_32,ml_all">
      <para>Å legge til <literal>-mstackrealign</literal> flagg som standard 
	  hjelper med å løse problemer med gamle binærfiler som ikke kan 
	  kompileres på nytt på det faktiske operativsystemet.</para>

      <!-- Thanks to xry111 for explaining the technical background: -->

      <para>I dag krever x86-32 SysV psABI (brukt av alle Linux-programmer) 
        en 16-byte justering av stakkrammen, så rutinene som 
		bruker SSE vil lagre/laste SSE vektorer på/fra stakken ved hjelp av en
        <literal>movaps</literal> instruksjon (som bare fungerer med 
		justerte adresser, men raskere enn motparten som tillater 
		ujusterte adresser, <literal>movups</literal>).</para>

      <para>Men noen virkelig gamle x86-32 Linux binærfiler (kompilert for omtrent 
        15 år siden), og alle Windows x86-32 binærfiler som kan 
		kjøres via <application>Wine</application> eller <application>Steam</application>
        justerer bare 
		stakkrammen til 4 byte. Dermed, når den kaller en SSE rutine i LFS 
		bygget uten <literal>-mstackrealign</literal>,
        <literal>movdqa</literal> instruksjonen mislykkes med en generell 
		beskyttelsesfeil, og Linux kjernen avslutter prosessen 
		med en SIGSEGV.</para>
    </note>

    <para>GCC dokumentasjonen anbefaler å bygge GCC 
	i en dedikert byggemappe:</para>

<screen><userinput remap="pre">mkdir -v build
cd       build</userinput></screen>

    <para>Forbered GCC for kompilering:</para>

<screen><userinput remap="configure">../configure                  \
    --target=$LFS_TGT         \
    --prefix=$LFS/tools       \
    --with-glibc-version=&glibc-version; \
    --with-sysroot=$LFS       \
    --with-newlib             \
    --without-headers         \
    --enable-default-pie      \
    --enable-default-ssp      \
    --disable-nls             \
    --disable-shared          \
    --disable-multilib        \
    --disable-threads         \
    --disable-libatomic       \
    --disable-libgomp         \
    --disable-libquadmath     \
    --disable-libssp          \
    --disable-libvtv          \
    --disable-libstdcxx       \
    --enable-languages=c,c++</userinput></screen>
<screen arch="ml_32,ml_x32,ml_all"><userinput remap="configure" 
    arch="ml_32">mlist=m64,m32</userinput><userinput remap="configure"
    arch="ml_x32">mlist=m64,mx32</userinput><userinput remap="configure"
    arch="ml_all">mlist=m64,m32,mx32</userinput>
<userinput remap="configure">../configure                  \
    --target=$LFS_TGT                              \
    --prefix=$LFS/tools                            \
    --with-glibc-version=&glibc-version;                      \
    --with-sysroot=$LFS                            \
    --with-newlib                                  \
    --without-headers                              \
    --enable-default-pie                           \
    --enable-default-ssp                           \
    --enable-initfini-array                        \
    --disable-nls                                  \
    --disable-shared                               \
    --enable-multilib --with-multilib-list=$mlist  \
    --disable-decimal-float                        \
    --disable-threads                              \
    --disable-libatomic                            \
    --disable-libgomp                              \
    --disable-libquadmath                          \
    --disable-libssp                               \
    --disable-libvtv                               \
    --disable-libstdcxx                            \
    --enable-languages=c,c++</userinput></screen>

    <variablelist>
      <title>Betydningen av konfigurasjonsalternativene:</title>

      <varlistentry>
        <term><parameter>--with-glibc-version=&glibc-version;</parameter></term>
        <listitem>
          <para>Dette alternativet spesifiserer versjonen av glibc som vil bli
          brukt på målet. Det er ikke relevant for vertens libc
          distribusjon fordi alt kompilert av pass1 gcc vil kjøre i
          chroot miljøet, som er isolert fra libc til vertens
          distribusjon.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--with-newlib</parameter></term>
        <listitem>
          <para>Siden et fungerende C bibliotek ikke er tilgjengelig ennå sikrer dette
          at inhibit_libc konstanten blir definert når du bygger libgcc. Dette forhindrer
          kompilering av kode som krever libc støtte.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--without-headers</parameter></term>
        <listitem>
          <para>Når du oppretter en komplett tverrkompilator, krever GCC
          standarddeklarasjoner som er kompatible med målsystemet. For vårt
          formål vil disse deklarasjonene ikke være nødvendige. Denne bryteren hindrer
          GCC i å lete etter dem.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
      <term><parameter>--enable-default-pie and
      --enable-default-ssp</parameter></term>
        <listitem>
          <para>Disse bryterne lar GCC kompilere programmer med
	      noen herdende sikkerhetsfunksjoner (mer informasjon om de
	      i <xref linkend="pie-ssp-info"/> kapittel 8) som standard. De er
	      strengt tatt ikke nødvendig på dette stadiet, siden kompilatoren bare vil 
		  produsere midlertidige kjørbare filer. Men det er renere å ha de 
		  midlertidige pakkene så nær de endelige som mulig.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-shared</parameter></term>
        <listitem>
          <para>Denne bryteren tvinger GCC til å koble sine interne biblioteker
          statisk. Vi trenger dette fordi de delte bibliotekene krever glibc,
          som ennå ikke er installert på målsystemet.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-multilib</parameter></term>
        <listitem>
          <para>På x86_64 støtter LFS ikke en multilib konfigurasjon.
          Denne bryteren er ufarlig for x86.</para>
      </varlistentry>
      <varlistentry arch="ml_32,ml_x32,ml_all">
        <term><parameter>--enable-multilib --with-multilib-list=...</parameter></term>
        <listitem>
          <para>LFS kan brukes til å støtte multilib. Hvilke de er, er 
		  spesifisert i multilib listen.</para>				
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-threads,
        --disable-libatomic, --disable-libgomp,
        --disable-libquadmath, --disable-libssp, --disable-libvtv,
        --disable-libstdcxx</parameter></term>
        <listitem>
          <para>Disse bryterne deaktiverer støtte for
          threading, libatomic, libgomp, libquadmath, libssp,
          libvtv og C++ standardbiblioteket. Disse funksjonene
          klarer ikke å kompilere når du bygger en krysskompilator og er ikke
          nødvendig for oppgaven med å krysskompilere den midlertidige libc.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--enable-languages=c,c++</parameter></term>
        <listitem>
          <para>Dette alternativet sikrer at bare C og C ++ kompilatorene blir bygget.
          Dette er de eneste språkene som trengs nå.</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>Kompiler GCC ved å kjøre:</para>

<screen><userinput remap="make">make</userinput></screen>

    <para>Installer pakken:</para>

    <screen><userinput remap="install">make install</userinput></screen>

    <para>Dette bygget av GCC har installert et par interne
    systemdeklarasjoner.  Normalt vil en av dem, <filename>limits.h</filename>, i sin tur
    inkludere den tilsvarende system <filename>limits.h</filename> systemdeklarasjonen, i
    dette tilfellet, <filename>$LFS/usr/include/limits.h</filename>. På tidspunktet for
    denne byggingen av GCC eksisterer imidlertid ikke <filename>$LFS/usr/include/limits.h</filename>
    så den interne deklarasjonen som nettopp har blitt installert er en
    delvis, selvstendig fil og inkluderer ikke de utvidede funksjonene til
    systemdeklarasjonen. Dette er tilstrekkelig for å bygge glibc, men den fullstendige
    interne deklarasjonen vil være nødvendig senere. Lag en fullversjon av den interne
    deklarasjonen ved å bruke en kommando som er identisk med det GCC byggesystemet gjør
    under normale omstendigheter:</para>

    <note>
      <para>Kommandoen nedenfor viser et eksempel på nestet kommandoerstatning
      ved å bruke to metoder: backquotes og a <literal>$()</literal> konstruksjon. 
      Det kan skrives om ved å bruke samme metode for begge erstatningene,
      men vises på denne måten for å demonstrere hvordan de kan blandes. Som regel
      er <literal>$()</literal> metoden foretrukket.</para>
    </note>

<screen><userinput remap="install">cd ..
cat gcc/limitx.h gcc/glimits.h gcc/limity.h > \
  `dirname $($LFS_TGT-gcc -print-libgcc-file-name)`/include/limits.h</userinput></screen>
  </sect2>

  <sect2 role="content">
    <title/>

    <para>Detaljer om denne pakken finner du i
    <xref linkend="contents-gcc" role="."/></para>

  </sect2>

</sect1>
