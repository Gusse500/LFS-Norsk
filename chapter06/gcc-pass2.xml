<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-tools-gcc-pass2" role="wrap" xreflabel="gcc-pass2">
  <?dbhtml filename="gcc-pass2.html"?>

  <sect1info condition="script">
    <productname>gcc-pass2</productname>
    <productnumber>&gcc-version;</productnumber>
    <address>&gcc-url;</address>
  </sect1info>

  <title>GCC-&gcc-version; - Pass 2</title>

  <indexterm zone="ch-tools-gcc-pass2">
    <primary sortas="a-GCC">GCC</primary>
    <secondary>tools, pass 2</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="../chapter08/gcc.xml"
    xpointer="xpointer(/sect1/sect2[1]/para[1])"/>

    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&gcc-tmpp2-sbu;</seg>
        <seg>&gcc-tmpp2-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>Installasjon av GCC</title>
<!--
    <para>Løs først et problem med den nyeste versjonen av glibc:</para>

    <screen><userinput remap="pre">patch -Np1 -i ../&gcc-upstream-fixes-patch;</userinput></screen>
-->
    <para>Som i den første versjonen av GCC, er GMP, MPFR og MPC pakkene
    nødvendig. Pakk ut tarballene og flytt dem til den nødvendige mappen:</para>

<screen><userinput remap="pre">tar -xf ../mpfr-&mpfr-version;.tar.xz
mv -v mpfr-&mpfr-version; mpfr
tar -xf ../gmp-&gmp-version;.tar.xz
mv -v gmp-&gmp-version; gmp
tar -xf ../mpc-&mpc-version;.tar.gz
mv -v mpc-&mpc-version; mpc</userinput></screen>

   <para arch="default">Hvis du bygger på x86_64, endre standard mappenavn for 64-bit
    bibliotekene til <quote>lib</quote>:</para>
<screen arch="default"><userinput remap="pre">case $(uname -m) in
  x86_64)
    sed -e '/m64=/s/lib64/lib/' \
        -i.orig gcc/config/i386/t-linux64
  ;;
esac</userinput></screen>

    <para arch="ml_32,ml_x32,ml_all">Endre standard mappenavn for
	bibliotekene:</para>

<screen arch="ml_32,ml_x32,ml_all"><userinput remap="pre">sed -e '/m64=/s/lib64/lib/' \
    -e '/m32=/s/m32=.*/m32=..\/lib32$(call if_multiarch,:i386-linux-gnu)/' \
    -i.orig gcc/config/i386/t-linux64</userinput></screen>

    <para arch="ml_32,ml_all">Gjør <literal>-mstackrealign</literal> standard for 32bit
      objekter:</para>

<screen arch="ml_32,ml_all"><userinput remap="pre">sed '/STACK_REALIGN_DEFAULT/s/0/(!TARGET_64BIT \&amp;\&amp; TARGET_SSE)/' \
      -i gcc/config/i386/i386.h</userinput></screen>
	  
    <para>Overstyr byggeregelen for libgcc og libstdc++ deklarasjoner, til
    å tillate byggingen av disse bibliotekene med støtte for POSIX-tråder:</para>
<screen><userinput remap="pre">sed '/thread_header =/s/@.*@/gthr-posix.h/' \
    -i libgcc/Makefile.in libstdc++-v3/include/Makefile.in</userinput></screen>

    <para>Opprett en egen byggemappe igjen:</para>

<screen><userinput remap="pre">mkdir -v build
cd       build</userinput></screen>

    <para>Før du begynner å bygge GCC, husk å deaktivere alle
    miljøvariabler som overstyrer standard optimaliseringsflagg.</para>

    <para>Forbered nå GCC for kompilering:</para>

<screen><userinput remap="configure">../configure                   \
    --build=$(../config.guess) \
    --host=$LFS_TGT            \
    --target=$LFS_TGT          \
    --prefix=/usr              \
    --with-build-sysroot=$LFS  \
    --enable-default-pie       \
    --enable-default-ssp       \
    --disable-nls              \
    --disable-multilib         \
    --disable-libatomic        \
    --disable-libgomp          \
    --disable-libquadmath      \
    --disable-libsanitizer     \
    --disable-libssp           \
    --disable-libvtv           \
    --enable-languages=c,c++   \
    LDFLAGS_FOR_TARGET=-L$PWD/$LFS_TGT/libgcc</userinput></screen>
<screen arch="ml_32,ml_x32,ml_all"><userinput remap="configure" 
    arch="ml_32">mlist=m64,m32</userinput><userinput remap="configure"
    arch="ml_x32">mlist=m64,mx32</userinput><userinput remap="configure"
    arch="ml_all">mlist=m64,m32,mx32</userinput>
<userinput remap="configure">../configure                                       \
    --build=$(../config.guess)                     \
    --host=$LFS_TGT                                \
    --target=$LFS_TGT                              \
    LDFLAGS_FOR_TARGET=-L$PWD/$LFS_TGT/libgcc      \
    --prefix=/usr                                  \
    --with-build-sysroot=$LFS                      \
    --enable-default-pie                           \
    --enable-default-ssp                           \
    --disable-nls                                  \
    --enable-multilib --with-multilib-list=$mlist  \
    --disable-libatomic                            \
    --disable-libgomp                              \
    --disable-libquadmath                          \
    --disable-libsanitizer                         \
    --disable-libssp                               \
    --disable-libvtv                               \
    --enable-languages=c,c++                       \
    LDFLAGS_FOR_TARGET=-L$PWD/$LFS_TGT/libgcc 
    </userinput></screen>

    <variablelist>
      <title>Betydningen av de nye konfigureringsalternativene:</title><!-- WIP -->

      <varlistentry>
        <term><parameter>--with-build-sysroot=$LFS</parameter></term>
        <listitem>
          <para>Normalt, å bruke <parameter>--host</parameter> sørger for at
          en krysskompilator brukes til å bygge GCC, og da vet dennne kompilatoren
          at den må lete etter overskrifter og biblioteker i <filename
          class="directory">$LFS</filename>. Men byggesystemet til GCC bruker
          andre verktøy som ikke er klar over denne plasseringen. Denne bryteren
          sørger for at de finner de nødvendige filene på <filename
          class="directory">$LFS</filename>, og ikke på verten.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--target=$LFS_TGT</parameter></term>
        <listitem>
          <para>Vi krysskompilerer GCC, så det er umulig å bygge
          målbibliotekene (<filename class="libraryfile">libgcc</filename>
          og <filename class="libraryfile">libstdc++</filename>) med
          GCC binærfiler kompilert i dette passet&mdash;disse binærfilene vil ikke kjøre
          på verten. GCC byggesystemet vil forsøke å bruke verten sin
          C og C++ kompilatorer som en standard løsning.
          Å bygge GCC målbibliotekene med en annen
          versjonen av GCC støttes ikke, så bruk av vertens kompilatorer kan føre til
          at byggingen mislykkes. Denne parameteren sikrer at bibliotekene bygges av GCC
          pass 1.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>LDFLAGS_FOR_TARGET=...</parameter></term>
        <listitem>
          <para>Tillat <filename class="libraryfile">libstdc++</filename> å
          bruke <filename class="libraryfile">libgcc</filename> som ble
          bygget i dette passet, i stedet for den forrige versjonen innebygd i
          <xref linkend='ch-tools-gcc-pass1'/>.  Den forrige versjonen kan ikke
          støtte C++ unntakshåndtering på riktig måte fordi den ble bygget
          uten libc støtte.</para>
        </listitem>
      </varlistentry>
	  
	  <varlistentry>
        <term><parameter>--disable-libsanitizer</parameter></term>
        <listitem>
          <para>Deaktiver GCC rensende kjøretidsbiblioteker. De er ikke
          nødvendig for den midlertidige installasjonen.  I
          <xref linkend='ch-tools-gcc-pass1'/> ble det antydet av
          <parameter>--disable-libstdcxx</parameter>, og nå kan vi
          gi den eksplisitt.</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>Kompiler pakken:</para>

<screen><userinput remap="make">make</userinput></screen>

    <para>Installer pakken:</para>

<screen><userinput remap="install">make DESTDIR=$LFS install</userinput></screen>

    <para>Som en siste finpuss kan du lage en symbolkobling. Mange programmer og skript
    bruker <command>cc</command> i stedet for <command>gcc</command>, som
    brukes til å holde programmer generiske og derfor brukbare på alle typer UNIX
    systemer der GNU C kompilatoren ikke alltid er installert. Å kjøre
    <command>cc</command> lar systemadministratoren bestemme
    hvilken C kompilator som skal installeres:</para>

<screen><userinput remap="install">ln -sv gcc $LFS/usr/bin/cc</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>Detaljer om denne pakken finner du i
    <xref linkend="contents-gcc" role="."/></para>

  </sect2>

</sect1>
